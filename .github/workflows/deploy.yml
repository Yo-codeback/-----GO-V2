name: 部署 (Deploy)

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  workflow_dispatch:
    inputs:
      environment:
        description: '部署環境'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # 部署到測試環境
  deploy-staging:
    name: 部署到測試環境
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging')
    environment: staging
    
    steps:
    - name: 檢出程式碼
      uses: actions/checkout@v4
      
    - name: 設定 Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: 登入 GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: 建置並推送 Docker 映像
      run: |
        docker build -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend:${{ github.sha }} ./frontend
        docker build -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend:${{ github.sha }} ./backend
        
        docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend:${{ github.sha }}
        docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend:${{ github.sha }}
        
    - name: 部署到測試環境
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.STAGING_HOST }}
        username: ${{ secrets.STAGING_USERNAME }}
        key: ${{ secrets.STAGING_SSH_KEY }}
        script: |
          cd /opt/accessible-toilet-go
          git pull origin main
          
          # 更新環境變數
          echo "IMAGE_TAG=${{ github.sha }}" > .env.deploy
          
          # 部署服務
          docker-compose -f docker-compose.staging.yml pull
          docker-compose -f docker-compose.staging.yml up -d
          
          # 執行資料庫遷移
          docker-compose -f docker-compose.staging.yml exec backend npx prisma migrate deploy
          
          # 健康檢查
          sleep 30
          curl -f http://localhost/api/health || exit 1
          
    - name: 執行煙霧測試
      run: |
        # 等待服務啟動
        sleep 60
        
        # 測試 API 健康狀態
        curl -f https://staging.accessible-toilet-go.com/api/health
        
        # 測試前端頁面
        curl -f https://staging.accessible-toilet-go.com/
        
    - name: 通知部署完成
      uses: 8398a7/action-slack@v3
      if: always()
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        text: |
          測試環境部署完成！
          環境: staging
          分支: ${{ github.ref }}
          提交: ${{ github.sha }}
          狀態: ${{ job.status }}
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # 部署到生產環境
  deploy-production:
    name: 部署到生產環境
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v') || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')
    environment: production
    needs: deploy-staging
    
    steps:
    - name: 檢出程式碼
      uses: actions/checkout@v4
      
    - name: 建立發布說明
      id: release_notes
      run: |
        # 取得上次發布的標籤
        PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
        
        if [ -z "$PREVIOUS_TAG" ]; then
          echo "這是首次發布" > release_notes.md
        else
          echo "## 變更內容" > release_notes.md
          echo "" >> release_notes.md
          git log --pretty=format:"- %s" $PREVIOUS_TAG..HEAD >> release_notes.md
        fi
        
        echo "notes<<EOF" >> $GITHUB_OUTPUT
        cat release_notes.md >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
        
    - name: 建立 GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref_name }}
        release_name: 無障礙廁所GO V2 ${{ github.ref_name }}
        body: ${{ steps.release_notes.outputs.notes }}
        draft: false
        prerelease: false
        
    - name: 登入 GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: 建置並推送生產映像
      run: |
        docker build -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend:${{ github.ref_name }} ./frontend
        docker build -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend:${{ github.ref_name }} ./backend
        
        docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend:${{ github.ref_name }}
        docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend:${{ github.ref_name }}
        
    - name: 備份生產資料庫
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.PRODUCTION_HOST }}
        username: ${{ secrets.PRODUCTION_USERNAME }}
        key: ${{ secrets.PRODUCTION_SSH_KEY }}
        script: |
          cd /opt/accessible-toilet-go
          
          # 建立資料庫備份
          BACKUP_FILE="backup_$(date +%Y%m%d_%H%M%S).sql"
          docker-compose exec -T postgres pg_dump -U postgres accessible_toilet_go > backups/$BACKUP_FILE
          
          # 保留最近 30 天的備份
          find backups/ -name "backup_*.sql" -mtime +30 -delete
          
    - name: 部署到生產環境
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.PRODUCTION_HOST }}
        username: ${{ secrets.PRODUCTION_USERNAME }}
        key: ${{ secrets.PRODUCTION_SSH_KEY }}
        script: |
          cd /opt/accessible-toilet-go
          git pull origin main
          
          # 更新環境變數
          echo "IMAGE_TAG=${{ github.ref_name }}" > .env.deploy
          
          # 執行滾動更新
          docker-compose -f docker-compose.production.yml pull
          
          # 更新後端服務
          docker-compose -f docker-compose.production.yml up -d backend
          sleep 30
          
          # 執行資料庫遷移
          docker-compose -f docker-compose.production.yml exec backend npx prisma migrate deploy
          
          # 更新前端服務
          docker-compose -f docker-compose.production.yml up -d frontend
          
          # 清理舊映像
          docker image prune -f
          
    - name: 生產環境健康檢查
      run: |
        # 等待服務啟動
        sleep 60
        
        # 測試 API 健康狀態
        curl -f https://api.accessible-toilet-go.com/health
        
        # 測試前端頁面
        curl -f https://accessible-toilet-go.com/
        
        # 測試關鍵 API 端點
        curl -f "https://api.accessible-toilet-go.com/api/toilets/nearby?lat=25.047924&lng=121.517081"
        
    - name: 通知生產部署完成
      uses: 8398a7/action-slack@v3
      if: always()
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        text: |
          生產環境部署完成！
          版本: ${{ github.ref_name }}
          提交: ${{ github.sha }}
          狀態: ${{ job.status }}
          發布頁面: https://github.com/${{ github.repository }}/releases/tag/${{ github.ref_name }}
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        
    - name: 更新監控儀表板
      run: |
        # 發送部署事件到監控系統
        curl -X POST https://monitoring.accessible-toilet-go.com/api/deployments \
          -H "Content-Type: application/json" \
          -H "Authorization: Bearer ${{ secrets.MONITORING_TOKEN }}" \
          -d '{
            "version": "${{ github.ref_name }}",
            "environment": "production",
            "timestamp": "'$(date -u +%Y-%m-%dT%H:%M:%SZ)'",
            "status": "success"
          }'
