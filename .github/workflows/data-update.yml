name: 資料更新 (Data Update)

on:
  schedule:
    # 每天凌晨 2 點執行
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      data_source:
        description: '資料來源'
        required: true
        default: 'all'
        type: choice
        options:
        - all
        - government
        - user_reports
        - manual_verification
      force_update:
        description: '強制更新所有資料'
        required: false
        default: false
        type: boolean

env:
  NODE_VERSION: '18'

jobs:
  # 更新政府開放資料
  update-government-data:
    name: 更新政府開放資料
    runs-on: ubuntu-latest
    if: github.event.inputs.data_source == 'all' || github.event.inputs.data_source == 'government' || github.event_name == 'schedule'
    
    steps:
    - name: 檢出程式碼
      uses: actions/checkout@v4
      
    - name: 設定 Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        
    - name: 安裝依賴
      run: |
        cd backend
        npm ci
        
    - name: 設定環境變數
      run: |
        echo "DATABASE_URL=${{ secrets.DATABASE_URL }}" >> backend/.env
        echo "GOVERNMENT_DATA_API_KEY=${{ secrets.GOVERNMENT_DATA_API_KEY }}" >> backend/.env
        echo "NODE_ENV=production" >> backend/.env
        
    - name: 執行政府資料同步
      run: |
        cd backend
        npm run data:sync:government
        
    - name: 驗證資料更新
      run: |
        cd backend
        npm run data:validate
        
    - name: 上傳更新報告
      uses: actions/upload-artifact@v3
      with:
        name: government-data-update-report
        path: backend/reports/
        
    - name: 通知資料更新完成
      uses: 8398a7/action-slack@v3
      if: always()
      with:
        status: ${{ job.status }}
        channel: '#data-updates'
        text: |
          政府開放資料更新完成！
          狀態: ${{ job.status }}
          時間: $(date)
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # 處理使用者回報
  process-user-reports:
    name: 處理使用者回報
    runs-on: ubuntu-latest
    if: github.event.inputs.data_source == 'all' || github.event.inputs.data_source == 'user_reports'
    
    steps:
    - name: 檢出程式碼
      uses: actions/checkout@v4
      
    - name: 設定 Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        
    - name: 安裝依賴
      run: |
        cd backend
        npm ci
        
    - name: 設定環境變數
      run: |
        echo "DATABASE_URL=${{ secrets.DATABASE_URL }}" >> backend/.env
        echo "NODE_ENV=production" >> backend/.env
        
    - name: 處理待審核的使用者回報
      run: |
        cd backend
        npm run data:process:user-reports
        
    - name: 發送回報處理通知
      run: |
        cd backend
        npm run data:notify:processed-reports

  # 執行資料品質檢查
  data-quality-check:
    name: 資料品質檢查
    runs-on: ubuntu-latest
    needs: [update-government-data, process-user-reports]
    
    steps:
    - name: 檢出程式碼
      uses: actions/checkout@v4
      
    - name: 設定 Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        
    - name: 安裝依賴
      run: |
        cd backend
        npm ci
        
    - name: 設定環境變數
      run: |
        echo "DATABASE_URL=${{ secrets.DATABASE_URL }}" >> backend/.env
        echo "NODE_ENV=production" >> backend/.env
        
    - name: 執行資料品質檢查
      run: |
        cd backend
        npm run data:quality-check
        
    - name: 產生資料品質報告
      run: |
        cd backend
        npm run data:generate-quality-report
        
    - name: 上傳品質報告
      uses: actions/upload-artifact@v3
      with:
        name: data-quality-report
        path: backend/reports/quality-report.json
        
    - name: 檢查資料品質問題
      id: quality_check
      run: |
        cd backend
        QUALITY_SCORE=$(node -e "const report = require('./reports/quality-report.json'); console.log(report.overallScore);")
        echo "quality_score=$QUALITY_SCORE" >> $GITHUB_OUTPUT
        
        if (( $(echo "$QUALITY_SCORE < 0.8" | bc -l) )); then
          echo "has_issues=true" >> $GITHUB_OUTPUT
        else
          echo "has_issues=false" >> $GITHUB_OUTPUT
        fi
        
    - name: 建立品質問題 Issue
      if: steps.quality_check.outputs.has_issues == 'true'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const report = JSON.parse(fs.readFileSync('backend/reports/quality-report.json', 'utf8'));
          
          const issues = report.issues.map(issue => 
            `- **${issue.type}**: ${issue.description} (影響: ${issue.affectedRecords} 筆記錄)`
          ).join('\n');
          
          await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `[資料品質] 發現 ${report.issues.length} 個資料品質問題`,
            body: `## 資料品質檢查報告
            
            **整體分數**: ${(report.overallScore * 100).toFixed(1)}%
            
            ### 發現的問題
            ${issues}
            
            ### 建議處理方式
            1. 檢查資料來源的完整性
            2. 驗證地理位置座標的正確性
            3. 更新過時的無障礙設施資訊
            
            請相關人員盡快處理這些問題。`,
            labels: ['data-quality', 'bug']
          });

  # 更新地圖快取
  update-map-cache:
    name: 更新地圖快取
    runs-on: ubuntu-latest
    needs: [data-quality-check]
    
    steps:
    - name: 檢出程式碼
      uses: actions/checkout@v4
      
    - name: 設定 Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        
    - name: 安裝依賴
      run: |
        cd backend
        npm ci
        
    - name: 設定環境變數
      run: |
        echo "DATABASE_URL=${{ secrets.DATABASE_URL }}" >> backend/.env
        echo "REDIS_URL=${{ secrets.REDIS_URL }}" >> backend/.env
        echo "GOOGLE_MAPS_API_KEY=${{ secrets.GOOGLE_MAPS_API_KEY }}" >> backend/.env
        echo "NODE_ENV=production" >> backend/.env
        
    - name: 清除舊的地圖快取
      run: |
        cd backend
        npm run cache:clear:maps
        
    - name: 預先快取熱門區域
      run: |
        cd backend
        npm run cache:warmup:maps
        
    - name: 更新搜尋索引
      run: |
        cd backend
        npm run search:rebuild-index

  # 執行備份
  backup-data:
    name: 資料備份
    runs-on: ubuntu-latest
    needs: [update-map-cache]
    
    steps:
    - name: 檢出程式碼
      uses: actions/checkout@v4
      
    - name: 設定 Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        
    - name: 安裝依賴
      run: |
        cd backend
        npm ci
        
    - name: 設定環境變數
      run: |
        echo "DATABASE_URL=${{ secrets.DATABASE_URL }}" >> backend/.env
        echo "BACKUP_S3_BUCKET=${{ secrets.BACKUP_S3_BUCKET }}" >> backend/.env
        echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" >> backend/.env
        echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> backend/.env
        echo "NODE_ENV=production" >> backend/.env
        
    - name: 建立資料庫備份
      run: |
        cd backend
        npm run backup:database
        
    - name: 備份檔案到 S3
      run: |
        cd backend
        npm run backup:upload-s3
        
    - name: 清理舊備份
      run: |
        cd backend
        npm run backup:cleanup

  # 發送更新摘要
  send-update-summary:
    name: 發送更新摘要
    runs-on: ubuntu-latest
    needs: [backup-data]
    if: always()
    
    steps:
    - name: 下載所有報告
      uses: actions/download-artifact@v3
      
    - name: 產生更新摘要
      run: |
        echo "# 資料更新摘要" > update_summary.md
        echo "更新時間: $(date)" >> update_summary.md
        echo "" >> update_summary.md
        
        echo "## 執行結果" >> update_summary.md
        echo "- 政府資料更新: ${{ needs.update-government-data.result }}" >> update_summary.md
        echo "- 使用者回報處理: ${{ needs.process-user-reports.result }}" >> update_summary.md
        echo "- 資料品質檢查: ${{ needs.data-quality-check.result }}" >> update_summary.md
        echo "- 地圖快取更新: ${{ needs.update-map-cache.result }}" >> update_summary.md
        echo "- 資料備份: ${{ needs.backup-data.result }}" >> update_summary.md
        
    - name: 發送摘要到 Slack
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#data-updates'
        text: |
          每日資料更新完成！
          
          執行結果:
          - 政府資料更新: ${{ needs.update-government-data.result }}
          - 使用者回報處理: ${{ needs.process-user-reports.result }}
          - 資料品質檢查: ${{ needs.data-quality-check.result }}
          - 地圖快取更新: ${{ needs.update-map-cache.result }}
          - 資料備份: ${{ needs.backup-data.result }}
          
          詳細報告請查看 GitHub Actions。
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        
    - name: 上傳摘要報告
      uses: actions/upload-artifact@v3
      with:
        name: daily-update-summary
        path: update_summary.md
