name: 持續整合 (CI)

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18'
  POSTGRES_VERSION: '14'

jobs:
  # 前端測試和建置
  frontend:
    name: 前端測試與建置
    runs-on: ubuntu-latest
    
    steps:
    - name: 檢出程式碼
      uses: actions/checkout@v4
      
    - name: 設定 Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
        
    - name: 安裝前端依賴
      run: |
        cd frontend
        npm ci
        
    - name: 執行 ESLint 檢查
      run: |
        cd frontend
        npm run lint
        
    - name: 執行 TypeScript 類型檢查
      run: |
        cd frontend
        npm run type-check
        
    - name: 執行前端測試
      run: |
        cd frontend
        npm run test:coverage
        
    - name: 上傳測試覆蓋率報告
      uses: codecov/codecov-action@v3
      with:
        file: ./frontend/coverage/lcov.info
        flags: frontend
        
    - name: 建置前端
      run: |
        cd frontend
        npm run build
        
    - name: 上傳建置產物
      uses: actions/upload-artifact@v3
      with:
        name: frontend-build
        path: frontend/dist/

  # 後端測試
  backend:
    name: 後端測試
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgis/postgis:${{ env.POSTGRES_VERSION }}-3.2
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - name: 檢出程式碼
      uses: actions/checkout@v4
      
    - name: 設定 Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json
        
    - name: 安裝後端依賴
      run: |
        cd backend
        npm ci
        
    - name: 設定環境變數
      run: |
        echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/test_db" >> backend/.env
        echo "REDIS_URL=redis://localhost:6379" >> backend/.env
        echo "JWT_SECRET=test-secret-key" >> backend/.env
        echo "NODE_ENV=test" >> backend/.env
        
    - name: 執行資料庫遷移
      run: |
        cd backend
        npx prisma migrate deploy
        
    - name: 執行 ESLint 檢查
      run: |
        cd backend
        npm run lint
        
    - name: 執行 TypeScript 類型檢查
      run: |
        cd backend
        npm run type-check
        
    - name: 執行後端測試
      run: |
        cd backend
        npm run test:coverage
        
    - name: 上傳測試覆蓋率報告
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage/lcov.info
        flags: backend

  # 無障礙測試
  accessibility:
    name: 無障礙測試
    runs-on: ubuntu-latest
    needs: [frontend]
    
    steps:
    - name: 檢出程式碼
      uses: actions/checkout@v4
      
    - name: 下載前端建置產物
      uses: actions/download-artifact@v3
      with:
        name: frontend-build
        path: frontend/dist/
        
    - name: 設定 Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        
    - name: 安裝 Playwright
      run: npm install -g @playwright/test
      
    - name: 安裝 Playwright 瀏覽器
      run: npx playwright install --with-deps
      
    - name: 啟動測試伺服器
      run: |
        cd frontend/dist
        npx serve -s . -l 3000 &
        sleep 10
        
    - name: 執行無障礙測試
      run: |
        npx playwright test --config=frontend/playwright.config.js
        
    - name: 上傳測試結果
      uses: actions/upload-artifact@v3
      if: failure()
      with:
        name: accessibility-test-results
        path: frontend/test-results/

  # 安全性掃描
  security:
    name: 安全性掃描
    runs-on: ubuntu-latest
    
    steps:
    - name: 檢出程式碼
      uses: actions/checkout@v4
      
    - name: 執行 Trivy 漏洞掃描
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: 上傳 Trivy 掃描結果
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

  # 程式碼品質檢查
  quality:
    name: 程式碼品質檢查
    runs-on: ubuntu-latest
    
    steps:
    - name: 檢出程式碼
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: 執行 SonarCloud 掃描
      uses: SonarSource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  # 建置 Docker 映像
  docker:
    name: 建置 Docker 映像
    runs-on: ubuntu-latest
    needs: [frontend, backend]
    
    steps:
    - name: 檢出程式碼
      uses: actions/checkout@v4
      
    - name: 設定 Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: 登入 Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        
    - name: 建置並推送前端映像
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        file: ./frontend/Dockerfile
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/accessible-toilet-go-frontend:latest
          ${{ secrets.DOCKER_USERNAME }}/accessible-toilet-go-frontend:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: 建置並推送後端映像
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        file: ./backend/Dockerfile
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/accessible-toilet-go-backend:latest
          ${{ secrets.DOCKER_USERNAME }}/accessible-toilet-go-backend:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
