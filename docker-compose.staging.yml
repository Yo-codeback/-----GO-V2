version: '3.8'

services:
  # PostgreSQL 資料庫
  postgres:
    image: postgis/postgis:14-3.2
    container_name: accessible-toilet-postgres-staging
    environment:
      POSTGRES_DB: accessible_toilet_go_staging
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - postgres_staging_data:/var/lib/postgresql/data
      - ./backend/prisma/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - staging-network
    restart: unless-stopped

  # Redis 快取
  redis:
    image: redis:7-alpine
    container_name: accessible-toilet-redis-staging
    ports:
      - "6379:6379"
    volumes:
      - redis_staging_data:/data
    networks:
      - staging-network
    restart: unless-stopped

  # 後端應用程式
  backend:
    image: ${REGISTRY}/${IMAGE_NAME}-backend:${IMAGE_TAG}
    container_name: accessible-toilet-backend-staging
    environment:
      NODE_ENV: staging
      DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/accessible_toilet_go_staging
      REDIS_URL: redis://redis:6379
      JWT_SECRET: ${JWT_SECRET}
      PORT: 3001
      API_RATE_LIMIT: 1000
      LOG_LEVEL: info
    ports:
      - "3001:3001"
    depends_on:
      - postgres
      - redis
    networks:
      - staging-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # 前端應用程式
  frontend:
    image: ${REGISTRY}/${IMAGE_NAME}-frontend:${IMAGE_TAG}
    container_name: accessible-toilet-frontend-staging
    environment:
      NODE_ENV: staging
      VITE_API_URL: http://localhost:3001/api
      VITE_GOOGLE_MAPS_API_KEY: ${GOOGLE_MAPS_API_KEY}
      VITE_ENVIRONMENT: staging
    ports:
      - "3000:3000"
    depends_on:
      - backend
    networks:
      - staging-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx 反向代理
  nginx:
    image: nginx:alpine
    container_name: accessible-toilet-nginx-staging
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.staging.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - frontend
      - backend
    networks:
      - staging-network
    restart: unless-stopped

  # 監控服務
  prometheus:
    image: prom/prometheus:latest
    container_name: accessible-toilet-prometheus-staging
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.staging.yml:/etc/prometheus/prometheus.yml
      - prometheus_staging_data:/prometheus
    networks:
      - staging-network
    restart: unless-stopped

  # Grafana 儀表板
  grafana:
    image: grafana/grafana:latest
    container_name: accessible-toilet-grafana-staging
    ports:
      - "3001:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD}
    volumes:
      - grafana_staging_data:/var/lib/grafana
    networks:
      - staging-network
    restart: unless-stopped

volumes:
  postgres_staging_data:
  redis_staging_data:
  prometheus_staging_data:
  grafana_staging_data:

networks:
  staging-network:
    driver: bridge
