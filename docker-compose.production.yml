version: '3.8'

services:
  # PostgreSQL 資料庫 (主從複製)
  postgres-master:
    image: postgis/postgis:14-3.2
    container_name: accessible-toilet-postgres-master
    environment:
      POSTGRES_DB: accessible_toilet_go
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_REPLICATION_USER: ${POSTGRES_REPLICATION_USER}
      POSTGRES_REPLICATION_PASSWORD: ${POSTGRES_REPLICATION_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - postgres_master_data:/var/lib/postgresql/data
      - ./backend/prisma/init.sql:/docker-entrypoint-initdb.d/init.sql
      - ./postgres/master.conf:/etc/postgresql/postgresql.conf
    networks:
      - production-network
    restart: unless-stopped
    command: postgres -c config_file=/etc/postgresql/postgresql.conf

  postgres-replica:
    image: postgis/postgis:14-3.2
    container_name: accessible-toilet-postgres-replica
    environment:
      POSTGRES_DB: accessible_toilet_go
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      PGUSER: ${POSTGRES_REPLICATION_USER}
      POSTGRES_MASTER_SERVICE: postgres-master
    volumes:
      - postgres_replica_data:/var/lib/postgresql/data
      - ./postgres/replica.conf:/etc/postgresql/postgresql.conf
    networks:
      - production-network
    restart: unless-stopped
    depends_on:
      - postgres-master

  # Redis 叢集
  redis-master:
    image: redis:7-alpine
    container_name: accessible-toilet-redis-master
    ports:
      - "6379:6379"
    volumes:
      - redis_master_data:/data
    networks:
      - production-network
    restart: unless-stopped
    command: redis-server --appendonly yes

  redis-replica:
    image: redis:7-alpine
    container_name: accessible-toilet-redis-replica
    ports:
      - "6380:6379"
    volumes:
      - redis_replica_data:/data
    networks:
      - production-network
    restart: unless-stopped
    command: redis-server --replicaof redis-master 6379 --appendonly yes

  # 後端應用程式 (多實例)
  backend:
    image: ${REGISTRY}/${IMAGE_NAME}-backend:${IMAGE_TAG}
    container_name: accessible-toilet-backend
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres-master:5432/accessible_toilet_go
      REDIS_URL: redis://redis-master:6379
      JWT_SECRET: ${JWT_SECRET}
      PORT: 3001
      API_RATE_LIMIT: 5000
      LOG_LEVEL: warn
      SENTRY_DSN: ${SENTRY_DSN}
    depends_on:
      - postgres-master
      - redis-master
    networks:
      - production-network
    restart: unless-stopped
    deploy:
      replicas: 3
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # 前端應用程式 (多實例)
  frontend:
    image: ${REGISTRY}/${IMAGE_NAME}-frontend:${IMAGE_TAG}
    container_name: accessible-toilet-frontend
    environment:
      NODE_ENV: production
      VITE_API_URL: https://api.accessible-toilet-go.com/api
      VITE_GOOGLE_MAPS_API_KEY: ${GOOGLE_MAPS_API_KEY}
      VITE_ENVIRONMENT: production
      VITE_SENTRY_DSN: ${SENTRY_DSN}
    depends_on:
      - backend
    networks:
      - production-network
    restart: unless-stopped
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx 負載平衡器
  nginx:
    image: nginx:alpine
    container_name: accessible-toilet-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.production.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - ./nginx/logs:/var/log/nginx
    depends_on:
      - frontend
      - backend
    networks:
      - production-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # 監控服務
  prometheus:
    image: prom/prometheus:latest
    container_name: accessible-toilet-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.production.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - production-network
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    container_name: accessible-toilet-grafana
    ports:
      - "3001:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD}
      GF_INSTALL_PLUGINS: grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
    networks:
      - production-network
    restart: unless-stopped

  # 日誌聚合
  loki:
    image: grafana/loki:latest
    container_name: accessible-toilet-loki
    ports:
      - "3100:3100"
    volumes:
      - loki_data:/loki
    networks:
      - production-network
    restart: unless-stopped

  promtail:
    image: grafana/promtail:latest
    container_name: accessible-toilet-promtail
    volumes:
      - ./monitoring/promtail.yml:/etc/promtail/config.yml
      - /var/log:/var/log:ro
    networks:
      - production-network
    restart: unless-stopped
    depends_on:
      - loki

  # 備份服務
  backup:
    image: postgres:14-alpine
    container_name: accessible-toilet-backup
    environment:
      PGPASSWORD: ${POSTGRES_PASSWORD}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      S3_BUCKET: ${BACKUP_S3_BUCKET}
    volumes:
      - ./scripts/backup.sh:/backup.sh
      - ./backups:/backups
    networks:
      - production-network
    restart: unless-stopped
    depends_on:
      - postgres-master
    command: /bin/sh -c "chmod +x /backup.sh && crond -f"

volumes:
  postgres_master_data:
  postgres_replica_data:
  redis_master_data:
  redis_replica_data:
  prometheus_data:
  grafana_data:
  loki_data:

networks:
  production-network:
    driver: bridge
